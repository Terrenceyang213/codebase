#%%
import numpy as np
import pandas as pd


df = pd.DataFrame(np.random.randn(10, 4), columns=["A", "B", "C", "D"])
df
#     A	        B	        C	        D
# 0	-0.589635	-1.128758	-1.836837	0.649957
# 1	-0.564747	3.557050	-0.225625	0.184502
# 2	-0.171421	-1.402046	-0.258757	1.208492
# 3	0.992882	-0.022058	0.223520	-0.255994
# 4	-1.029569	-0.541394	-1.632207	0.011050
# 5	0.437896	-0.991462	-0.739147	1.144689
# 6	0.122739	-0.048138	-0.896234	-0.315093
# 7	0.471191	-1.574410	0.190709	1.048402
# 8	0.013429	-1.019577	-0.353054	-0.904598
# 9	0.503896	-0.300399	-1.512410	-0.665426




# %% 
# 与标量的数值计算

df * 10
#   A	        B	        C	        D
# 0	-5.896346	-11.287576	-18.368366	6.499566
# 1	-5.647472	35.570496	-2.256253	1.845023
# 2	-1.714213	-14.020456	-2.587567	12.084924
# 3	9.928819	-0.220585	2.235199	-2.559936
# 4	-10.295695	-5.413935	-16.322073	0.110504
# 5	4.378961	-9.914624	-7.391466	11.446889
# 6	1.227388	-0.481377	-8.962338	-3.150934
# 7	4.711911	-15.744100	1.907093	10.484016
# 8	0.134285	-10.195766	-3.530539	-9.045980
# 9	5.038960	-3.003990	-15.124098	-6.654257

1 / df
#   A	        B	        C	        D
# 0	-1.695966	-0.885930	-0.544414	1.538564
# 1	-1.770704	0.281132	-4.432128	5.419987
# 2	-5.833580	-0.713244	-3.864635	0.827477
# 3	1.007169	-45.334045	4.473874	-3.906347
# 4	-0.971280	-1.847085	-0.612667	90.494716
# 5	2.283647	-1.008611	-1.352912	0.873600
# 6	8.147381	-20.773735	-1.115780	-3.173662
# 7	2.122281	-0.635159	5.243584	0.953833
# 8	74.468387	-0.980799	-2.832429	-1.105463
# 9	1.984537	-3.328905	-0.661196	-1.502797


df ** 4
#   A	            B	            C	        D
# 0	1.208737e-01	1.623315e+00	11.383665	1.784586e-01
# 1	1.017224e-01	1.600883e+02	0.002591	1.158796e-03
# 2	8.634939e-04	3.864102e+00	0.004483	2.132926e+00
# 3	9.718300e-01	2.367566e-07	0.002496	4.294540e-03
# 4	1.123628e+00	8.591168e-02	7.097432	1.491101e-08
# 5	3.676922e-02	9.662844e-01	0.298485	1.716919e+00
# 6	2.269488e-04	5.369597e-06	0.645187	9.857287e-03
# 7	4.929333e-02	6.144285e+00	0.001323	1.208122e+00
# 8	3.251713e-08	1.080636e+00	0.015537	6.696110e-01
# 9	6.447087e-02	8.143183e-03	5.232123	1.960642e-01




# %%
# 布林值运算
df1 = pd.DataFrame({"a": [1, 0, 1], "b": [0, 1, 1]}, dtype=bool)
df2 = pd.DataFrame({"a": [0, 1, 1], "b": [1, 1, 0]}, dtype=bool)

df1
#   a	    b
# 0	True	False
# 1	False	True
# 2	True	True

df2
#   a	    b
# 0	False	True
# 1	True	True
# 2	True	False


df1 & df2
#   a	    b
# 0	False	False
# 1	False	True
# 2	True	False


df1 | df2
#   a	    b
# 0	True	True
# 1	True	True
# 2	True	True

df1 ^ df2
#   a	    b
# 0	True	True
# 1	True	False
# 2	False	True

-df1
#   a	    b
# 0	False	True
# 1	True	False
# 2	False	False




#%%
# 使用numpy函数进行计算

np.exp(df)
#   A	        B	        C	        D
# 0	0.078875	0.560589	1.817228	1.319318
# 1	1.196310	0.341713	2.029838	1.715706
# 2	6.825650	0.622923	2.728098	0.822316
# 3	0.436185	6.987868	1.023232	0.549833
# 4	0.272141	1.606356	0.369501	0.774448
# 5	1.197256	1.931634	0.395942	1.549107
# 6	1.020989	0.325217	0.988620	12.271519
# 7	2.262851	0.765660	0.297878	0.627841
# 8	0.974424	0.636962	1.218043	0.949124
# 9	2.665820	2.948906	1.157845	1.379156


np.asarray(df)
# array([[-2.53988834, -0.57876648,  0.59731249,  0.27711476],
#        [ 0.17924148, -1.07378425,  0.70795607,  0.53982448],
#        [ 1.92068756, -0.47333161,  1.00360484, -0.19563041],
#        [-0.82968937,  1.9441755 ,  0.02296596, -0.59814006],
#        [-1.30143593,  0.47396818, -0.99560249, -0.25560486],
#        [ 0.180032  ,  0.65836602, -0.92648876,  0.43767894],
#        [ 0.02077174, -1.12326112, -0.01144478,  2.50728102],
#        [ 0.81662546, -0.26701769, -1.21107162, -0.46546908],
#        [-0.02590847, -0.45104516,  0.19724566, -0.05221561],
#        [ 0.98051174,  1.08143438,  0.14656067,  0.32147137]])



#%%
# DataFrame不能替代ndarray，因为它的索引语义和数据模型在位置上与n维数组完全不同。

ser = pd.Series([1, 2, 3, 4])
np.exp(ser)
# 0     2.718282
# 1     7.389056
# 2    20.085537
# 3    54.598150
# dtype: float64


# 将多个Series传递给ufunc时，在执行操作之前将它们对齐。
ser1 = pd.Series([1, 2, 3], index=["a", "b", "c"])
ser2 = pd.Series([1, 3, 5], index=["b", "a", "c"])
np.remainder(ser1, ser2)
# a    1
# b    0
# c    3
# dtype: int64

# 返回两个数组arr1和arr2之间的除法元素余数，
# 即 arr1 % arr2 当arr2为0且arr1和arr2都是整数数组时，返回0。
# return [ndarray]按元素的余数，即arr1％arr2。



#%%
# When a binary ufunc is applied to a Series and Index, 
# the Series implementation takes precedence and a Series is returned.

ser = pd.Series([1, 2, 3])
idx = pd.Index([4, 5, 6])
np.maximum(ser, idx)
# 0    4
# 1    5
# 2    6
# dtype: int64



# %%
